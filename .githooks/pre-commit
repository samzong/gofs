#!/bin/bash
# Git pre-commit hook for gofs
# This script runs code quality checks before each git commit

set -e

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# cd to project root
cd "$(git rev-parse --git-dir)/.."

echo -e "${BLUE}Running pre-commit checks...${NC}"

# Check if we're in the project root directory
if [ ! -f "Makefile" ]; then
    echo -e "${RED}Error: Please run this script from the project root directory${NC}"
    exit 1
fi

# 1. Check Go file formatting
echo -e "${BLUE}1. Checking code format...${NC}"
(
    if goimports -l . | grep -q .; then
        echo -e "${YELLOW}Found formatting issues, auto-fixing...${NC}"
        (cd .. && make fmt)
        echo -e "${GREEN}Code format has been fixed${NC}"
        
        # If there are file changes after formatting, need to re-add
        if ! git diff --quiet HEAD; then
            echo -e "${YELLOW}Code formatting produced changes, please re-add these files:${NC}"
            git diff --name-only HEAD
            echo -e "${YELLOW}Run: git add . && git commit${NC}"
            exit 1
        fi
    else
        echo -e "${GREEN}Code format check passed${NC}"
    fi
)

# 2. Run golangci-lint
echo -e "${BLUE}2. Running code checks...${NC}"
if make lint; then
    echo -e "${GREEN}Code check passed${NC}"
else
    echo -e "${RED}Code check failed, please fix issues and retry${NC}"
    echo -e "${YELLOW}Tip: Run 'make lint-fix' to auto-fix some issues${NC}"
    exit 1
fi

# 4. Check for sensitive information
echo -e "${BLUE}4. Checking for sensitive information...${NC}"
SENSITIVE_PATTERNS=(
    "password.*=.*['\"][^'\"]*['\"]"
    "secret.*=.*['\"][^'\"]*['\"]"
    "token.*=.*['\"][^'\"]*['\"]"
    "api_key.*=.*['\"][^'\"]*['\"]"
    "private_key"
    "BEGIN RSA PRIVATE KEY"
    "BEGIN PRIVATE KEY"
)

FOUND_SENSITIVE=false
for pattern in "${SENSITIVE_PATTERNS[@]}"; do
    if git diff --cached --name-only | grep -v '.githooks/pre-commit' | xargs grep -i -E "$pattern" 2>/dev/null | grep -v 'tokenString := strings.TrimPrefix(authHeader, "Bearer ")'; then
        echo -e "${RED}Warning: Found potential sensitive information${NC}"
        FOUND_SENSITIVE=true
    fi
done

if [ "$FOUND_SENSITIVE" = true ]; then
    echo -e "${YELLOW}Please confirm the above content does not contain real sensitive information${NC}"
    echo -e "${YELLOW}If confirmed safe, you can use 'git commit --no-verify' to skip checks${NC}"
    exit 1
fi

echo -e "${GREEN}All checks passed, ready to commit!${NC}"
exit 0