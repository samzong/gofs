name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    tags: [ 'v*' ]

# When a new commit is pushed to a PR, cancel any previous runs for that PR.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Quality checks for PR
  check:
    # Only run on pull requests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    permissions:
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
        cache-dependency-path: |
          go.sum
          go.mod

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: go
        queries: security-and-quality

    - name: Run quality checks
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=10m --skip-dirs=vendor --skip-files=".*\\.pb\\.go$"
        only-new-issues: true
    
    - name: Run unit tests
      run: make test
      env:
        CGO_ENABLED: 0

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    # Replaced OWASP Dependency Check with Trivy for better Go support
    - name: Run Trivy vulnerability scanner on source code
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        # Only report high and critical vulnerabilities in PR checks
        severity: 'HIGH,CRITICAL'
        # Fail the build if vulnerabilities are found
        exit-code: '1'
        # Skip unfixed vulnerabilities to reduce noise
        ignore-unfixed: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'
        category: 'trivy-pr-check'

  # Semgrep security scan (Optimized)
  semgrep:
    name: Semgrep Scan
    # Only run on pull requests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    permissions:
      contents: read
      security-events: write
    container:
      image: semgrep/semgrep
    steps:
      - uses: actions/checkout@v4
        with:
          # For PRs, we need to fetch the target branch for comparison.
          fetch-depth: 0
      - name: Run Semgrep Scan
        id: semgrep
        # For PRs, run a diff-aware scan. For pushes to main, run a full scan.
        run: semgrep scan --config auto --sarif --output=semgrep.sarif
        env:
          # Token is still useful for Semgrep to access git history for tracking findings.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  # Build and release for tags using GoReleaser
  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write  # Required for Cosign signing
      security-events: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
        cache-dependency-path: |
          go.sum
          go.mod

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: '~> v2'
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GO_VERSION: ${{ steps.go.outputs.go-version }}
        # Enable reproducible builds
        CGO_ENABLED: 0

    - name: Run Trivy vulnerability scanner on source code
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-source'

    - name: Scan Docker images with Trivy
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: 'ghcr.io/${{ github.repository }}:${{ github.ref_name }}'
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload Docker image scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'
        category: 'trivy-image'

    - name: Generate SBOM for source code
      uses: anchore/sbom-action@v0.17.2
      with:
        path: .
        format: spdx-json
        output-file: sbom-source.spdx.json

    - name: Generate SBOM for Docker image
      uses: anchore/sbom-action@v0.17.2
      with:
        image: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        format: spdx-json
        output-file: sbom-image.spdx.json

    - name: Install Cosign for container signing
      uses: sigstore/cosign-installer@v3.7.0

    - name: Sign container image with Cosign
      run: |
        cosign sign --yes ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        cosign sign --yes ghcr.io/${{ github.repository }}:latest

    - name: Attest SBOM to container image
      run: |
        cosign attest --yes --predicate sbom-image.spdx.json --type spdxjson ghcr.io/${{ github.repository }}:${{ github.ref_name }}
        cosign attest --yes --predicate sbom-image.spdx.json --type spdxjson ghcr.io/${{ github.repository }}:latest

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-files
        path: |
          sbom-source.spdx.json
          sbom-image.spdx.json
